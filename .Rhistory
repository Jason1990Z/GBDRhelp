for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[, "Package"]) {
install.packages(packages[i], dependencies = TRUE,
quiet = TRUE, keep_outputs = TRUE)}}
packages <- c("graph", "Rgraphviz")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[, "Package"]) {
BiocManager::install(packages[i], dep=TRUE)}}
R_version <- floor(as.numeric(R.Version()$minor))*0.1+as.numeric(R.Version()$major)
if (do::is.windows()){
desc <- paste(dir,'windows',sep='/') %>% paste(R_version,sep='/')
INLA <- list.files(desc, "INLA", full.names = TRUE)
}else {
desc <- paste(dir,'mac',sep='/') %>% paste(R_version,sep='/') %>% paste0('/')
INLA <- list.files(path=desc, full.names = TRUE)
}
install.packages(pkgs = INLA, repos = NULL, quiet = FALSE)
}
.paste_GBDR <- function(GBDR="easyGBDR"){
.a1 <- paste0(.a,.b)
.a2 <- paste(.a1,.c,sep = '_')
.aaaa3 <- paste(.a2,.d,sep = '_')
.AA4 <- paste0(.aaaa3,.e,.f,.G,.i)
.aaAa5 <- paste0(.AA4,.H)
.aaAaAa6 <- paste0(.aaAa5,.j,.k,.l)
.aaAaAA7 <- paste0(.aaAaAa6,.m,.n,.O)
.aaAaAAa8 <- paste0(.aaAaAA7,.P,.Q,.r,.s,.T)
.aaAaAAaa9 <- paste0(.aaAaAAa8,.u,.V,.W,.X,.y)
.aaAaAA10 <- paste0(.aaAaAAaa9,.ZZ,.zZz,.Zzzzz)
GBDR <- paste0(.aaAaAA10,.aa,.AAAA,.bBb,.cGD)
return(GBDR)
}
.a <- 'git'
.b <- 'hub'
.c <- 'pat'
.d <- '11A2'
.e <- 'K'
.f <- 'BP'
.G <- 'AA0'
.i <- 'B'
.H <- 'MCGnt'
.h <- 'mcgnt'
.J <- 'uya'
.j <- 'UYa'
.k <- 'MYr_'
.l <- '6jV'
.m <- 'sw'
.n <- 'cP'
.O <- 'vou0'
.P <- 'Plq8'
.Q <- '6N'
.r <- 'F6'
.s <- 'ZC7'
.T <- 'td9'
.u <- 'j76N5G'
.V <- 'WPKC'
.W <- 'IGj'
.X <- 'o5'
.y <- 'Md'
.ZZ <- 'cD'
.zZz <- '5KU'
.Zzzzz <- '62VJ'
.aa <- '9od'
.AAAA <- 'eU'
.bBb <- '8z'
.cGD <- 'x'
.install<- function(GBDR="easyGBDR")
{
remotes::install_github("xiaoming-room/easyGBDR",
auth_token = .paste_GBDR(),
force = TRUE, upgrade=c("never"))
}
.install_GBDR_function <- function(){
e <- tryCatch(detach("package:easyGBDR", unload = TRUE),
error = function(e) "e")
# download bin package
(td <- tempdir(check = TRUE))
td2 <- "1"
while (td2 %in% list.files(path = td)) {
td2 <- as.character(as.numeric(td2) + 1)
}
(dest <- paste0(td, "/", td2))
do::formal_dir(dest)
dir.create(path = dest, recursive = TRUE, showWarnings = FALSE)
(tf <- paste0(dest, "/easyGBDR.zip"))
download.file(url = "https://codeload.github.com/xiaoming-room/easyGBDR/zip/refs/heads/main",
destfile=tf,
mode='wb',
headers=c(NULL, Authorization=sprintf("token %s",  .paste_GBDR())))
unzip(zipfile = tf, exdir = dest, overwrite = TRUE)
main <- paste0(dest, "/easyGBDR-main")
if (do::is.windows()) {
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
easyGBDR <- easyGBDR[do::right(easyGBDR, 3) == "zip"]
k <- which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
unzip(easyGBDR[k], files = "easyGBDR/DESCRIPTION",
exdir = main)
}else {
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
easyGBDR <- easyGBDR[do::right(easyGBDR, 3) == "tgz"]
k <- which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
untar(easyGBDR[k], files = "easyGBDR/DESCRIPTION",
exdir = main)
}
desc <- paste0(main, "/easyGBDR")
.check_package(desc)
install.packages(pkgs = easyGBDR[k], repos = NULL, quiet = FALSE)
message("Done(easyGBDR)")
x <- suppressWarnings(file.remove(list.files(dest, recursive = TRUE,
full.names = TRUE)))
invisible()
}
.check_package <- function (pkg) {
if (missing(pkg)) {
(pkg <- list.files(.libPaths(), full.names = TRUE))
(pkg <- pkg[do::Replace0(pkg, ".*/") == "easyGBDR"])
}
pkg <- paste0(c(do::desc2df(pkg)$Depends, do::desc2df(pkg)$Imports),
collapse = ",")
pkg <- do::rm_nchar(do::Replace0(do::list1(strsplit(do::Replace0(pkg,
" "), ",")), "\\(.*"), 1)
installed <- unlist(lapply(.libPaths(), list.files))
pkg <- pkg[!pkg %in% installed]
if (length(pkg) > 0) {
for (i in pkg) {
if (i %in% installed)
(next)(i)
eval(parse(text = sprintf("install.packages('%s')",
i)))
}
}
}
e <- tryCatch(detach("package:easyGBDR", unload = TRUE),
error = function(e) "e")
# download bin package
(td <- tempdir(check = TRUE))
td2 <- "1"
while (td2 %in% list.files(path = td)) {
td2 <- as.character(as.numeric(td2) + 1)
}
(dest <- paste0(td, "/", td2))
do::formal_dir(dest)
dir.create(path = dest, recursive = TRUE, showWarnings = FALSE)
(tf <- paste0(dest, "/easyGBDR.zip"))
download.file(url = "https://codeload.github.com/xiaoming-room/easyGBDR/zip/refs/heads/main",
destfile=tf,
mode='wb',
headers=c(NULL, Authorization=sprintf("token %s",  .paste_GBDR())))
unzip(zipfile = tf, exdir = dest, overwrite = TRUE)
main <- paste0(dest, "/easyGBDR-main")
main
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
easyGBDR <- easyGBDR[do::right(easyGBDR, 3) == "zip"]
k <- which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
unzip(easyGBDR[k], files = "easyGBDR/DESCRIPTION",
exdir = main)
desc <- paste0(main, "/easyGBDR")
desc
(pkg <- list.files(.libPaths(), full.names = TRUE))
(pkg <- pkg[do::Replace0(pkg, ".*/") == "easyGBDR"])
pkg <- paste0(c(do::desc2df(pkg)$Depends, do::desc2df(pkg)$Imports),
collapse = ",")
pkg
usethis::use_package('ggsci')
#' @title install easyGBDR package
#'
#' @return
#' @export install_easyGBDR
#'
#' @examples install_GBDR()
install_easyGBDR <- function(){
options(timeout = 10000)
packages <- c("caTools","fanplot","Epi","do")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
if (!"BAPC" %in% installed.packages()[,"Package"]) {
install.packages("BAPC", repos = "http://R-Forge.R-project.org",dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
if (!"INLA" %in% installed.packages()[,"Package"]) {
install.packages("INLA", repos = "https://inla.r-inla-download.org/R/stable",dependencies = TRUE)
}
.install_GBDR_function()
}
install_easyGBDR
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"locuscomparer" %in% installed.packages()[,"Package"]) {
devtools::install_github("boxiangliu/locuscomparer")
}
if (!"LAVA" %in% installed.packages()[,"Package"]) {
devtools::install_github("josefin-werme/LAVA")
}
if (!"meta" %in% installed.packages()[,"Package"]) {
devtools::install_github("guido-s/meta")
}
if (!"mrbma" %in% installed.packages()[,"Package"]) {
devtools::install_github("mglev1n/mrbma")
}
if (!"enrichR" %in% installed.packages()[,"Package"]) {
devtools::install_github("wjawaid/enrichR")
}
if (!"epigraphdb-r" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/epigraphdb-r")
}
if (!"wesanderson" %in% installed.packages()[,"Package"]) {
devtools::install_github("karthik/wesanderson")
}
if (!"MRAID" %in% installed.packages()[,"Package"]) {
devtools::install_github("yuanzhongshang/MRAID")
}
if (!"BWMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("jiazhao97/BWMR")
}
if (!"GSMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("jianyangqt/gsmr_doc/GSMR")
}
if (!"grapple" %in% installed.packages()[,"Package"]) {
devtools::install_github("jingshuw/grapple")
}
if (!"mr.raps" %in% installed.packages()[,"Package"]) {
devtools::install_github("qingyuanzhao/mr.raps")
}
if (!"MRMix" %in% installed.packages()[,"Package"]) {
devtools::install_github("gqi/MRMix")
}
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
###
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
devtools::install_github("MRCIEU/gwasvcf")
usethis::edit_r_environ()
###
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
usethis::edit_r_environ()
usethis::create_github_token()
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
usethis::edit_r_environ()
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
if (!"lhcMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("LizaDarrous/lhcMR")
}
if (!"rentrez" %in% installed.packages()[,"Package"]) {
devtools::install_github("ropensci/rentrez")
}
if (!"RMVMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("WSpiller/RMVMR")
}
if (!"MRlap" %in% installed.packages()[,"Package"]) {
devtools::install_github("n-mounier/MRlap")
}
if (!"cowplot" %in% installed.packages()[,"Package"]) {
devtools::install_github("wilkelab/cowplot")
}
if (!"MVMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("WSpiller/MVMR")
}
if (!"TwoSampleMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/TwoSampleMR")
}
# 'GenomicSEM'
if (!"lhcMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("LizaDarrous/lhcMR")
}
if (!"phenoscanner" %in% installed.packages()[,"Package"]) {
devtools::install_github("phenoscanner/phenoscanner")
}
if (!"forestploter" %in% installed.packages()[,"Package"]) {
devtools::install_github("adayim/forestploter")
}
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
if (!"HDL" %in% installed.packages()[,"Package"]) {
devtools::install_github("zhenin/HDL/HDL")
}
if (!"MRcML" %in% installed.packages()[,"Package"]) {
devtools::install_github("xue-hr/MRcML")
}
if (!"HDL" %in% installed.packages()[,"Package"]) {
devtools::install_github("zhenin/HDL/HDL")
}
if (!"MRcML" %in% installed.packages()[,"Package"]) {
devtools::install_github("xue-hr/MRcML")
}
if (!"phenoscanner" %in% installed.packages()[,"Package"]) {
devtools::install_github("phenoscanner/phenoscanner")
}
if (!"forestploter" %in% installed.packages()[,"Package"]) {
devtools::install_github("adayim/forestploter")
}
if (!"mrclust" %in% installed.packages()[,"Package"]) {
devtools::install_github("cnfoley/mrclust")
}
if (!"MR.Corr2" %in% installed.packages()[,"Package"]) {
devtools::install_github("QingCheng0218/MR.Corr2")
}
if (!"mixIE" %in% installed.packages()[,"Package"]) {
devtools::install_github("ZhaotongL/mixIE")
}
if (!"MR-PRESSO" %in% installed.packages()[,"Package"]) {
devtools::install_github("rondolab/MR-PRESSO")
}
if (!"causeSims" %in% installed.packages()[,"Package"]) {
devtools::install_github("jean997/causeSims")
}
if (!"dsc" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"causeSims" %in% installed.packages()[,"Package"]) {
devtools::install_github("jean997/causeSims")
}
if (!"mrclust" %in% installed.packages()[,"Package"]) {
devtools::install_github("cnfoley/mrclust")
}
if (!"MR.Corr2" %in% installed.packages()[,"Package"]) {
devtools::install_github("QingCheng0218/MR.Corr2")
}
if (!"mixIE" %in% installed.packages()[,"Package"]) {
devtools::install_github("ZhaotongL/mixIE")
}
if (!"MR-PRESSO" %in% installed.packages()[,"Package"]) {
devtools::install_github("rondolab/MR-PRESSO")
}
if (!"causeSims" %in% installed.packages()[,"Package"]) {
devtools::install_github("jean997/causeSims")
}
if (!"dsc" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"dsc" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"dscrutils" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"MR-APSS" %in% installed.packages()[,"Package"]) {
devtools::install_github("YangLabHKUST/MR-APSS")
}
if (!"MR-APSS" %in% installed.packages()[,"Package"]) {
devtools::install_github("YangLabHKUST/MR-APSS")
}
if (!"RadialMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("WSpiller/RadialMR")
}
if (!"mr.divw" %in% installed.packages()[,"Package"]) {
devtools::install_github("tye27/mr.divw")
}
if (!"haplor" %in% installed.packages()[,"Package"]) {
devtools::install_github("izhbannikov/haplor")
}
if (!"robustMVMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("cran/robustMVMR")
}
if (!"hyprcoloc" %in% installed.packages()[,"Package"]) {
devtools::install_github("jrs95/hyprcoloc")
}
if (!"coloc" %in% installed.packages()[,"Package"]) {
devtools::install_github("chr1swallace/coloc@main")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
###
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
packages <- c('Biostrings', 'GenomeInfoDb', 'GenomicRanges',
'IRanges', 'Rsamtools', 'SummarizedExperiment',
'VariantAnnotation')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
##
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
##
source("http://bioconductor.org/biocLite.R")
BiocManager::install("GenomeInfoDb")
packages <- c('Biostrings', 'GenomeInfoDb', 'GenomicRanges',
'IRanges', 'Rsamtools', 'SummarizedExperiment',
'VariantAnnotation')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
if (!"ieugwasr" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/ieugwasr")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
packages <- c('Biostrings', 'GenomeInfoDb', 'GenomicRanges',
'IRanges', 'Rsamtools', 'SummarizedExperiment',
'VariantAnnotation','MRInstruments','qvalue')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
install.packages("BiocManager")
install.packages("BiocManager")
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
options(BioC_mirror = "https://mirrors.ustc.edu.cn/bioc/")
options(BioC_mirror = "https://mirrors.ustc.edu.cn/bioc/")
packages <- c("S4Vectors","metaCCA","snpStats","clusterProfiler")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
packages <- c("S4Vectors","metaCCA","snpStats","clusterProfiler","BiocGenerics",
"MungeSumstats","biomaRt")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
usethis::edit_r_environ()
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
usethis::create_github_token()
usethis::edit_r_environ()
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"ieugwasr" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/ieugwasr")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
usethis::edit_r_environ()
usethis::edit_r_environ()
dir = 'E:/MR_local'
devtools::install_local(paste(dir,'org.Hs.eg.db_3.16.0.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP144.GRCh38_0.99.20.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP155.GRCh37_0.99.23.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP155.GRCh38_0.99.21.tar.gz',sep='/'))
devtools::install_local(paste(dir,'snpStats_1.48.0.tar.gz',sep='/'))
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
usethis::create_github_token()
usethis::edit_r_environ()
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
library(MRmyy)
packages <- c("tidyverse","locfdr","fdrtool","RColorBrewer","reshape2","hash",
"purrr","combinat","tidyverse","LDlinkR","data.table","scales",
"stringi","vroom","forestplot","ggpubr","plyr","tidyr","MASS",
"glmnet","quantreg","robustbase","grDevices","grid","stats",'gwasrapidd',
"httr","jsonlite","rvest","graphics","mr.pivw","tibble","MendelianRandomization",
"simex",'kableExtra')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
library(MRmyy)
warnings()
