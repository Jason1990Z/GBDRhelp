headers = c(NULL, Authorization = sprintf("token %s",'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')))
#' @title install easyGBDR package
#'
#' @return
#' @export install_easyGBDR
#'
#' @examples install_GBDR()
install_easyGBDR <- function(){
packages <- c( "remotes")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
.install_GBDR_function()
}
.install_GBDR_function <- function(GBDR="easyGBDR"){
.install(GBDR)
}
.paste_GBDR <- function(GBDR="easyGBDR"){
.a1 <- paste0(.a,.b)
.a2 <- paste(.a1,.c,sep = '_')
.aaaa3 <- paste(.a2,.d,sep = '_')
GBDR <- paste0(.aaaa3,.e,.f,.G,.i,.H,.j,.k,.l,.m,.n,.O,.P,.Q,.r,.s,.T,.u,.V,.W,.X,.y,.ZZ,.zZz,.Zzzzz,.aa,.AAAA,.bBb,.cGD)
return(GBDR)
}
.a <- 'git'
.b <- 'hub'
.c <- 'pat'
.d <- '11A2'
.e <- 'K'
.f <- 'BP'
.G <- 'AA0'
.i <- 'B'
.H <- 'MCGnt'
.j <- 'UYa'
.k <- 'MYr_'
.l <- '6jV'
.m <- 'sw'
.n <- 'cP'
.O <- 'vou0'
.P <- 'Plq8'
.Q <- '6N'
.r <- 'F6'
.s <- 'ZC7'
.T <- 'td9'
.u <- 'j76N5G'
.V <- 'WPKC'
.W <- 'IGj'
.X <- 'o5'
.y <- 'Md'
.ZZ <- 'cD'
.zZz <- '5KU'
.Zzzzz <- '62VJ'
.aa <- '9od'
.AAAA <- 'eU'
.bBb <- '8z'
.cGD <- 'x'
download.file(url = "https://codeload.github.com/xiaoming-room/easyGBDR/zip/refs/heads/main",
destfile = 'E:/easyGBDR.zip',
mode = "wb",
headers = c(NULL, Authorization = sprintf("token %s",.paste_GBDR())))
token <- .paste_GBDR()
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json = jsonlite::fromJSON(httr::content(res, "text"))
json$assets
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json = jsonlite::fromJSON(httr::content(res, "text"))
json$assets
View(json)
json[["html_url"]]
json[["upload_url"]]
json[["assets_url"]]
json[["url"]]
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json = jsonlite::fromJSON(httr::content(res, "text"))
View(json)
url = 'https://api.github.com/repos/jianboy/RDemoPackage/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", paste("github_pat", "11ACX7N3Y0O2mgpCe11N4v_NCCR5hm9TLrfDSUKxTMe9uc75mlaOgtyZp4gCIAYF9oRGLSTW7SKoNpFTq6", sep='_'))))
json = jsonlite::fromJSON(httr::content(res, "text"))
View(json)
token <- .paste_GBDR()
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
View(json2)
View(json[["assets"]])
View(json[["assets"]])
get_latest_release <- function(token) {
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
return(json$assets)
}
token <- .paste_GBDR()
.get_latest_release <- function(token) {
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", .paste_GBDR())))
json = jsonlite::fromJSON(httr::content(res, "text"))
return(json$assets)
}
.resolve_github_api <-  function(token){
assets_json = get_latest_release(token)
if (do::is.linux()) {
suffix="tar.gz"
} else if (do::is.windows()) {
suffix="zip"
} else if (do::is.mac()) {
suffix="tgz"
}
for (i in 1:nrow(assets_json)) {
if (grepl(suffix, assets_json$browser_download_url[i])) {
url = assets_json$browser_download_url[i]
break
}
}
return(url)
}
install_bin_package()
install_bin_package <- function(){
e <- tryCatch(detach("package:easyGBDR", unload = TRUE),
error = function(e) "e")
packages <- c( "remotes","httr","jsonlite","do")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
# download bin package
url = .resolve_github_api(token=.paste_GBDR())
(td <- tempdir(check = TRUE))
td2 <- '1'
while(td2 %in% list.files(path = td)){
td2 <- as.character(as.numeric(td2)+1)
}
(dest <- paste0(td, '\\', td2))
do::formal_dir(dest)
dir.create(path = dest,recursive = TRUE,showWarnings = FALSE)
(tf <- paste0(dest,'\\RDemoPackage_1.0.1.zip'))
download.file(url = url,
destfile=tf,
mode='wb',
headers=c(NULL, Authorization=sprintf("token %s", auth_token)))
# install package
install.packages(pkgs=tf, repos=NULL, quiet=FALSE)
message('RDemoPackage installed.')
}
# download bin package
url = .resolve_github_api(token=.paste_GBDR())
url
.resolve_github_api <-  function(token){
assets_json = .get_latest_release(token)
if (do::is.linux()) {
suffix="tar.gz"
} else if (do::is.windows()) {
suffix="zip"
} else if (do::is.mac()) {
suffix="tgz"
}
for (i in 1:nrow(assets_json)) {
if (grepl(suffix, assets_json$browser_download_url[i])) {
url = assets_json$browser_download_url[i]
break
}
}
return(url)
}
# download bin package
url = .resolve_github_api(token=.paste_GBDR())
url
.get_latest_release <- function(token) {
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", .paste_GBDR())))
json = jsonlite::fromJSON(httr::content(res, "text"))
return(json$assets)
}
.resolve_github_api <-  function(token){
assets_json = .get_latest_release(token)
if (do::is.linux()) {
suffix="tar.gz"
} else if (do::is.windows()) {
suffix="zip"
} else if (do::is.mac()) {
suffix="tgz"
}
for (i in 1:nrow(assets_json)) {
if (grepl(suffix, assets_json$browser_download_url[i])) {
url = assets_json$browser_download_url[i]
break
}
}
return(url)
}
# download bin package
url = .resolve_github_api(token=.paste_GBDR())
.paste_GBDR()
token=.paste_GBDR()
assets_json = .get_latest_release(token)
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", .paste_GBDR())))
json = jsonlite::fromJSON(httr::content(res, "text"))
View(json)
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
View(json2)
url = 'https://api.github.com/repos/jianboy/RDemoPackage/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", paste("github_pat", "11ACX7N3Y0O2mgpCe11N4v_NCCR5hm9TLrfDSUKxTMe9uc75mlaOgtyZp4gCIAYF9oRGLSTW7SKoNpFTq6", sep='_'))))
json = jsonlite::fromJSON(httr::content(res, "text"))
View(json)
url = 'https://api.github.com/repos/jianboy/RDemoPackage/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", paste("github_pat", "11ACX7N3Y0O2mgpCe11N4v_NCCR5hm9TLrfDSUKxTMe9uc75mlaOgtyZp4gCIAYF9oRGLSTW7SKoNpFTq6", sep='_'))))
json = jsonlite::fromJSON(httr::content(res, "text"))
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
View(json2)
json2[["assets"]]
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
View(json2)
token
token <- .paste_GBDR()
url = 'https://api.github.com/repos/xiaoming-room/easyGBDR/releases/latest'
res = httr::GET(url, httr::add_headers(Authorization = paste("token", token)))
json2 = jsonlite::fromJSON(httr::content(res, "text"))
View(json2)
nhshelp::install_nhanesR
download.file(url = "https://codeload.github.com/xiaoming-room/easyGBDR/zip/refs/heads/main",
destfile='E:/easyGBDR.zip',
mode='wb',
headers=c(NULL, Authorization=sprintf("token %s",  .paste_GBDR())))
install_easyGBDR <- function(){
packages <- c( "remotes","httr","jsonlite","do")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
.install_GBDR_function()
}
.install_GBDR_function <- function(GBDR="easyGBDR"){
.install(GBDR)
}
.paste_GBDR <- function(GBDR="easyGBDR"){
.a1 <- paste0(.a,.b)
.a2 <- paste(.a1,.c,sep = '_')
.aaaa3 <- paste(.a2,.d,sep = '_')
GBDR <- paste0(.aaaa3,.e,.f,.G,.i,.H,.j,.k,.l,.m,.n,.O,.P,.Q,.r,.s,.T,.u,.V,.W,.X,.y,.ZZ,.zZz,.Zzzzz,.aa,.AAAA,.bBb,.cGD)
return(GBDR)
}
.a <- 'git'
.b <- 'hub'
.c <- 'pat'
.d <- '11A2'
.e <- 'K'
.f <- 'BP'
.G <- 'AA0'
.i <- 'B'
.H <- 'MCGnt'
.j <- 'UYa'
.k <- 'MYr_'
.l <- '6jV'
.m <- 'sw'
.n <- 'cP'
.O <- 'vou0'
.P <- 'Plq8'
.Q <- '6N'
.r <- 'F6'
.s <- 'ZC7'
.T <- 'td9'
.u <- 'j76N5G'
.V <- 'WPKC'
.W <- 'IGj'
.X <- 'o5'
.y <- 'Md'
.ZZ <- 'cD'
.zZz <- '5KU'
.Zzzzz <- '62VJ'
.aa <- '9od'
.AAAA <- 'eU'
.bBb <- '8z'
.cGD <- 'x'
.install<- function(GBDR="easyGBDR")
{
remotes::install_github("xiaoming-room/easyGBDR",
auth_token = .paste_GBDR(),
force = TRUE, upgrade=c("never"))
}
download.file(url = "https://codeload.github.com/xiaoming-room/easyGBDR/zip/refs/heads/main",
destfile='E:/easyGBDR.zip',
mode='wb',
headers=c(NULL, Authorization=sprintf("token %s",  .paste_GBDR())))
unzip(zipfile = tf, exdir = 'E:/', overwrite = TRUE)
tf
unzip(zipfile = 'E:/easyGBDR.zip', exdir = 'E:/', overwrite = TRUE)
main <- paste0(dest, "/easyGBDR-main")
dest <- 'E:/'
main <- paste0(dest, "/easyGBDR-main")
dest <- 'E:'
main <- paste0(dest, "/easyGBDR-main")
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
unzip(zipfile = 'E:/easyGBDR.zip', exdir = 'E:/', overwrite = TRUE)
list.files(main, "easyGBDR_", full.names = TRUE)
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
do::right(easyGBDR, 3)
do::right
do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\."))
do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")
which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
k <- which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
unzip(easyGBDR[k], files = "easyGBDR/DESCRIPTION",
exdir = main)
easyGBDR[k]
unzip(easyGBDR[k], files = "RDemoPackage/DESCRIPTION",
exdir = main)
desc <- paste0(main, "/RDemoPackage")
check_package(desc)
nhshelp::check_package
desc
if (missing(pkg)) {
(pkg <- list.files(.libPaths(), full.names = TRUE))
(pkg <- pkg[do::Replace0(pkg, ".*/") == "nhanesR"])
}
missing(pkg)
pkg
pkg=desc
if (missing(pkg)) {
(pkg <- list.files(.libPaths(), full.names = TRUE))
(pkg <- pkg[do::Replace0(pkg, ".*/") == "nhanesR"])
}
pkg <- paste0(c(do::desc2df(pkg)$Depends, do::desc2df(pkg)$Imports),
collapse = ",")
pkg <- do::rm_nchar(do::Replace0(do::list1(strsplit(do::Replace0(pkg,
" "), ",")), "\\(.*"), 1)
installed <- unlist(lapply(.libPaths(), list.files))
pkg <- pkg[!pkg %in% installed]
if (length(pkg) > 0) {
for (i in pkg) {
installed <- unlist(lapply(.libPaths(), list.files))
if (i %in% installed)
(next)(i)
eval(parse(text = sprintf("install.packages('%s')",
i)))
}
}
pkg=desc
if (missing(pkg)) {
(pkg <- list.files(.libPaths(), full.names = TRUE))
(pkg <- pkg[do::Replace0(pkg, ".*/") == "nhanesR"])
}
pkg <- paste0(c(do::desc2df(pkg)$Depends, do::desc2df(pkg)$Imports),
collapse = ",")
pkg <- do::rm_nchar(do::Replace0(do::list1(strsplit(do::Replace0(pkg,
" "), ",")), "\\(.*"), 1)
installed <- unlist(lapply(.libPaths(), list.files))
unlist(lapply(.libPaths(), list.files))
installed <- unlist(lapply(.libPaths(), list.files))
eval(parse(text = sprintf("install.packages('%s')",
i)))
i =pkg[1]
eval(parse(text = sprintf("install.packages('%s')",
i)))
install.packages("do")
pkg
pkg=desc
#' @title install easyGBDR package
#'
#' @return
#' @export install_easyGBDR
#'
#' @examples install_GBDR()
install_easyGBDR <- function(){
packages <- c( "remotes","httr","jsonlite","do")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
.install_GBDR_function()
}
.install_GBDR_function <- function(GBDR="easyGBDR"){
.install(GBDR)
}
.paste_GBDR <- function(GBDR="easyGBDR"){
.a1 <- paste0(.a,.b)
.a2 <- paste(.a1,.c,sep = '_')
.aaaa3 <- paste(.a2,.d,sep = '_')
GBDR <- paste0(.aaaa3,.e,.f,.G,.i,.H,.j,.k,.l,.m,.n,.O,.P,.Q,.r,.s,.T,.u,.V,.W,.X,.y,.ZZ,.zZz,.Zzzzz,.aa,.AAAA,.bBb,.cGD)
return(GBDR)
}
.a <- 'git'
.b <- 'hub'
.c <- 'pat'
.d <- '11A2'
.e <- 'K'
.f <- 'BP'
.G <- 'AA0'
.i <- 'B'
.H <- 'MCGnt'
.j <- 'UYa'
.k <- 'MYr_'
.l <- '6jV'
.m <- 'sw'
.n <- 'cP'
.O <- 'vou0'
.P <- 'Plq8'
.Q <- '6N'
.r <- 'F6'
.s <- 'ZC7'
.T <- 'td9'
.u <- 'j76N5G'
.V <- 'WPKC'
.W <- 'IGj'
.X <- 'o5'
.y <- 'Md'
.ZZ <- 'cD'
.zZz <- '5KU'
.Zzzzz <- '62VJ'
.aa <- '9od'
.AAAA <- 'eU'
.bBb <- '8z'
.cGD <- 'x'
.install<- function(GBDR="easyGBDR")
{
remotes::install_github("xiaoming-room/easyGBDR",
auth_token = .paste_GBDR(),
force = TRUE, upgrade=c("never"))
}
.install_bin_package <- function(){
e <- tryCatch(detach("package:easyGBDR", unload = TRUE),
error = function(e) "e")
# download bin package
(td <- tempdir(check = TRUE))
td2 <- "1"
while (td2 %in% list.files(path = td)) {
td2 <- as.character(as.numeric(td2) + 1)
}
(dest <- paste0(td, "/", td2))
do::formal_dir(dest)
dir.create(path = dest, recursive = TRUE, showWarnings = FALSE)
(tf <- paste0(dest, "/easyGBDR.zip"))
dest <- 'E:'
download.file(url = "https://codeload.github.com/xiaoming-room/easyGBDR/zip/refs/heads/main",
destfile='E:/easyGBDR.zip',
mode='wb',
headers=c(NULL, Authorization=sprintf("token %s",  .paste_GBDR())))
unzip(zipfile = 'E:/easyGBDR.zip', exdir = 'E:/', overwrite = TRUE)
main <- paste0(dest, "/easyGBDR-main")
if (do::is.windows()) {
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
easyGBDR <- easyGBDR[do::right(easyGBDR, 3) == "zip"]
k <- which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
unzip(easyGBDR[k], files = "RDemoPackage/DESCRIPTION",
exdir = main)
}
else {
easyGBDR <- list.files(main, "easyGBDR_", full.names = TRUE)
easyGBDR <- easyGBDR[do::right(easyGBDR, 3) == "tgz"]
k <- which.max(as.numeric(do::Replace0(easyGBDR, ".*easyGBDR_",
"\\.zip", "\\.tgz", "\\.")))
untar(easyGBDR[k], files = "easyGBDR/DESCRIPTION",
exdir = main)
}
desc <- paste0(main, "/RDemoPackage")
check_package(desc)
install.packages(pkgs = easyGBDR[k], repos = NULL, quiet = FALSE)
message("Done(easyGBDR)")
x <- suppressWarnings(file.remove(list.files(dest, recursive = TRUE,
full.names = TRUE)))
invisible()
# install package
install.packages(pkgs=tf, repos=NULL, quiet=FALSE)
message('RDemoPackage installed.')
}
check_package <- function (pkg) {
if (missing(pkg)) {
(pkg <- list.files(.libPaths(), full.names = TRUE))
(pkg <- pkg[do::Replace0(pkg, ".*/") == "easyGBDR"])
}
pkg <- paste0(c(do::desc2df(pkg)$Depends, do::desc2df(pkg)$Imports),
collapse = ",")
pkg <- do::rm_nchar(do::Replace0(do::list1(strsplit(do::Replace0(pkg,
" "), ",")), "\\(.*"), 1)
installed <- unlist(lapply(.libPaths(), list.files))
pkg <- pkg[!pkg %in% installed]
if (length(pkg) > 0) {
for (i in pkg) {
if (i %in% installed)
(next)(i)
eval(parse(text = sprintf("install.packages('%s')",
i)))
}
}
}
.paste_GBDR()
MendelR:::analsis_vcf()
MendelR:::analsis_vcf
MendelR:::analsis_vcf.default
library(tidyfst)
View(check_package)
