install_easyGBDR
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"locuscomparer" %in% installed.packages()[,"Package"]) {
devtools::install_github("boxiangliu/locuscomparer")
}
if (!"LAVA" %in% installed.packages()[,"Package"]) {
devtools::install_github("josefin-werme/LAVA")
}
if (!"meta" %in% installed.packages()[,"Package"]) {
devtools::install_github("guido-s/meta")
}
if (!"mrbma" %in% installed.packages()[,"Package"]) {
devtools::install_github("mglev1n/mrbma")
}
if (!"enrichR" %in% installed.packages()[,"Package"]) {
devtools::install_github("wjawaid/enrichR")
}
if (!"epigraphdb-r" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/epigraphdb-r")
}
if (!"wesanderson" %in% installed.packages()[,"Package"]) {
devtools::install_github("karthik/wesanderson")
}
if (!"MRAID" %in% installed.packages()[,"Package"]) {
devtools::install_github("yuanzhongshang/MRAID")
}
if (!"BWMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("jiazhao97/BWMR")
}
if (!"GSMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("jianyangqt/gsmr_doc/GSMR")
}
if (!"grapple" %in% installed.packages()[,"Package"]) {
devtools::install_github("jingshuw/grapple")
}
if (!"mr.raps" %in% installed.packages()[,"Package"]) {
devtools::install_github("qingyuanzhao/mr.raps")
}
if (!"MRMix" %in% installed.packages()[,"Package"]) {
devtools::install_github("gqi/MRMix")
}
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
###
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
devtools::install_github("MRCIEU/gwasvcf")
usethis::edit_r_environ()
###
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
usethis::edit_r_environ()
usethis::create_github_token()
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
usethis::edit_r_environ()
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
if (!"lhcMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("LizaDarrous/lhcMR")
}
if (!"rentrez" %in% installed.packages()[,"Package"]) {
devtools::install_github("ropensci/rentrez")
}
if (!"RMVMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("WSpiller/RMVMR")
}
if (!"MRlap" %in% installed.packages()[,"Package"]) {
devtools::install_github("n-mounier/MRlap")
}
if (!"cowplot" %in% installed.packages()[,"Package"]) {
devtools::install_github("wilkelab/cowplot")
}
if (!"MVMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("WSpiller/MVMR")
}
if (!"TwoSampleMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/TwoSampleMR")
}
# 'GenomicSEM'
if (!"lhcMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("LizaDarrous/lhcMR")
}
if (!"phenoscanner" %in% installed.packages()[,"Package"]) {
devtools::install_github("phenoscanner/phenoscanner")
}
if (!"forestploter" %in% installed.packages()[,"Package"]) {
devtools::install_github("adayim/forestploter")
}
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
if (!"HDL" %in% installed.packages()[,"Package"]) {
devtools::install_github("zhenin/HDL/HDL")
}
if (!"MRcML" %in% installed.packages()[,"Package"]) {
devtools::install_github("xue-hr/MRcML")
}
if (!"HDL" %in% installed.packages()[,"Package"]) {
devtools::install_github("zhenin/HDL/HDL")
}
if (!"MRcML" %in% installed.packages()[,"Package"]) {
devtools::install_github("xue-hr/MRcML")
}
if (!"phenoscanner" %in% installed.packages()[,"Package"]) {
devtools::install_github("phenoscanner/phenoscanner")
}
if (!"forestploter" %in% installed.packages()[,"Package"]) {
devtools::install_github("adayim/forestploter")
}
if (!"mrclust" %in% installed.packages()[,"Package"]) {
devtools::install_github("cnfoley/mrclust")
}
if (!"MR.Corr2" %in% installed.packages()[,"Package"]) {
devtools::install_github("QingCheng0218/MR.Corr2")
}
if (!"mixIE" %in% installed.packages()[,"Package"]) {
devtools::install_github("ZhaotongL/mixIE")
}
if (!"MR-PRESSO" %in% installed.packages()[,"Package"]) {
devtools::install_github("rondolab/MR-PRESSO")
}
if (!"causeSims" %in% installed.packages()[,"Package"]) {
devtools::install_github("jean997/causeSims")
}
if (!"dsc" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"causeSims" %in% installed.packages()[,"Package"]) {
devtools::install_github("jean997/causeSims")
}
if (!"mrclust" %in% installed.packages()[,"Package"]) {
devtools::install_github("cnfoley/mrclust")
}
if (!"MR.Corr2" %in% installed.packages()[,"Package"]) {
devtools::install_github("QingCheng0218/MR.Corr2")
}
if (!"mixIE" %in% installed.packages()[,"Package"]) {
devtools::install_github("ZhaotongL/mixIE")
}
if (!"MR-PRESSO" %in% installed.packages()[,"Package"]) {
devtools::install_github("rondolab/MR-PRESSO")
}
if (!"causeSims" %in% installed.packages()[,"Package"]) {
devtools::install_github("jean997/causeSims")
}
if (!"dsc" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"dsc" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"dscrutils" %in% installed.packages()[,"Package"]) {
devtools::install_github("stephenslab/dsc",subdir = "dscrutils",
force = TRUE)
}
if (!"MR-APSS" %in% installed.packages()[,"Package"]) {
devtools::install_github("YangLabHKUST/MR-APSS")
}
if (!"MR-APSS" %in% installed.packages()[,"Package"]) {
devtools::install_github("YangLabHKUST/MR-APSS")
}
if (!"RadialMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("WSpiller/RadialMR")
}
if (!"mr.divw" %in% installed.packages()[,"Package"]) {
devtools::install_github("tye27/mr.divw")
}
if (!"haplor" %in% installed.packages()[,"Package"]) {
devtools::install_github("izhbannikov/haplor")
}
if (!"robustMVMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("cran/robustMVMR")
}
if (!"hyprcoloc" %in% installed.packages()[,"Package"]) {
devtools::install_github("jrs95/hyprcoloc")
}
if (!"coloc" %in% installed.packages()[,"Package"]) {
devtools::install_github("chr1swallace/coloc@main")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
###
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
packages <- c('Biostrings', 'GenomeInfoDb', 'GenomicRanges',
'IRanges', 'Rsamtools', 'SummarizedExperiment',
'VariantAnnotation')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
##
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
##
source("http://bioconductor.org/biocLite.R")
BiocManager::install("GenomeInfoDb")
packages <- c('Biostrings', 'GenomeInfoDb', 'GenomicRanges',
'IRanges', 'Rsamtools', 'SummarizedExperiment',
'VariantAnnotation')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
if (!"gwasvcf" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasvcf")
}
if (!"gwasglue" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/gwasglue")
}
if (!"ieugwasr" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/ieugwasr")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
packages <- c('Biostrings', 'GenomeInfoDb', 'GenomicRanges',
'IRanges', 'Rsamtools', 'SummarizedExperiment',
'VariantAnnotation','MRInstruments','qvalue')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
install.packages("BiocManager")
install.packages("BiocManager")
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
options(BioC_mirror = "https://mirrors.ustc.edu.cn/bioc/")
options(BioC_mirror = "https://mirrors.ustc.edu.cn/bioc/")
packages <- c("S4Vectors","metaCCA","snpStats","clusterProfiler")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
packages <- c("S4Vectors","metaCCA","snpStats","clusterProfiler","BiocGenerics",
"MungeSumstats","biomaRt")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
BiocManager::install(packages[i])
}
}
usethis::edit_r_environ()
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
usethis::create_github_token()
usethis::edit_r_environ()
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"ieugwasr" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/ieugwasr")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
usethis::edit_r_environ()
usethis::edit_r_environ()
dir = 'E:/MR_local'
devtools::install_local(paste(dir,'org.Hs.eg.db_3.16.0.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP144.GRCh38_0.99.20.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP155.GRCh37_0.99.23.tar.gz',sep='/'))
devtools::install_local(paste(dir,'SNPlocs.Hsapiens.dbSNP155.GRCh38_0.99.21.tar.gz',sep='/'))
devtools::install_local(paste(dir,'snpStats_1.48.0.tar.gz',sep='/'))
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
usethis::create_github_token()
usethis::edit_r_environ()
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
if (!"MRInstruments" %in% installed.packages()[,"Package"]) {
devtools::install_github("MRCIEU/MRInstruments")
}
if (!"GagnonMR" %in% installed.packages()[,"Package"]) {
devtools::install_github("gagelo01/GagnonMR")
}
library(MRmyy)
packages <- c("tidyverse","locfdr","fdrtool","RColorBrewer","reshape2","hash",
"purrr","combinat","tidyverse","LDlinkR","data.table","scales",
"stringi","vroom","forestplot","ggpubr","plyr","tidyr","MASS",
"glmnet","quantreg","robustbase","grDevices","grid","stats",'gwasrapidd',
"httr","jsonlite","rvest","graphics","mr.pivw","tibble","MendelianRandomization",
"simex",'kableExtra')
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
library(MRmyy)
warnings()
library(GBDinstall)
GBDinstall::getToken()
token <- .getToken()
library(GBDinstall)
GBDinstall::getToken()
remotes::install_github("biobricks-ai/biobricks-r")
.getToken <- function(){
library(digest)
x <- Sys.info()
if (Sys.info()[1] != "Windows") {
x <- x[!names(x) %in% c("machine")]
if (x["user"] %in% c("NEW")) {
x <- x[!names(x) %in% c("nodename")]
}
}
if (Sys.info()[1] == "Windows") {
x <- toupper(rev(do::Replace(do::Replace0(unique(x), " "),
".*-", "a")))
token <- paste0(paste0(LETTERS[1:length(x)], x), collapse = "")
token_md5 <- sapply(token, digest, algo="md5")
} else {
hardware_info <- system("system_profiler SPHardwareDataType", intern = TRUE)
disk_info <- grep("Serial Number", hardware_info, value = TRUE)
disk_info <- do::Replace0(disk_info,' ')
disk_sn <- sub("SerialNumber\\(system\\):", replacement="", disk_info)
hardware_uuid <- grep("Hardware UUID", hardware_info, value = TRUE)
hardware_uuid <- do::Replace0(hardware_uuid,' ')
hardware_sn <- sub("HardwareUUID:", replacement="", hardware_uuid)
hardware_info <- paste0(disk_sn, hardware_sn)
hash <- digest(hardware_info, algo = "sha256")
token_md5 <- substr(hash, 1, 16)
}
return(token_md5)
}
#' Title
#'
#' @return
#' @export
#'
#' @examples
getToken <- function(){
token <- .getToken()
if (do::cnOS()){
message("#############################################")
message(tmcn::toUTF8("欢迎使用easyGBDR,请联系我们获取授权使用！"))
message(tmcn::toUTF8("邮箱:"), "Xiaoming_room@hotmail.com")
message(tmcn::toUTF8("微信:"), "Endoscopy_1991")
message("token:", token)
message(tmcn::toUTF8("将上面的token发送给我们"))
message("#############################################")
} else {
message("#############################################")
message("Welcome to use easyGBDR, Please contact us for authorization!")
message("Email: Xiaoming_room@hotmail.com")
message("Wechat ID: Endoscopy_1991")
message("token:", token)
message(tmcn::toUTF8("Please send the above token to us"))
message("#############################################")
}
}
getToken()
TaskID = '50409ff4de71d629c802be0eff3725be'
paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID)
substr(TaskID,8)
substr(TaskID,1,8)
i=1
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
GBD_url
file <-  'IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip'
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
file
dest = 'F:/GBD'
paste0(dest,'/',file)
download_GBD <- function(TaskID,num,dest){
for (i in 1:num){
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
download.file(url = "https://dl.healthdata.org:443/gbd-api-2019-public/7c08bbd5fc3eac5b2ce38370f382bf90_files/IHME-GBD_2019_DATA-7c08bbd5-1.zip",
destfile=paste0(dest,'/',file),
mode='wb')
}
}
download_GBD(TaskID='50409ff4de71d629c802be0eff3725be',num=404,dest='F:/GBD')
download_GBD(TaskID='d2569d8b702065b87262fc930a10609b',num=404,dest='F:/GBD')
download_GBD(TaskID='30c76f4a77f7792afec4e17b02b2dd4b',num=253,dest='F:/GBD')
download_GBD(TaskID='40f82465d3e5cca8dfacd2d604038d0f',num=76,dest='F:/GBD')
download_GBD(TaskID='40f82465d3e5cca8dfacd2d604038d0f',num=76,dest='F:/GBD')
download_GBD(TaskID='30c76f4a77f7792afec4e17b02b2dd4b',num=253,dest='F:/GBD')
download_GBD(TaskID='d2569d8b702065b87262fc930a10609b',num=404,dest='F:/GBD')
download_GBD(TaskID = '576a3038524da24d988f70f0e72dd59c',num = 51,dest = 'F:/GBD')
download_GBD <- function(TaskID,num,dest){
for (i in 1:num){
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
download.file(url = "https://dl.healthdata.org:443/gbd-api-2019-public/7c08bbd5fc3eac5b2ce38370f382bf90_files/IHME-GBD_2019_DATA-7c08bbd5-1.zip",
destfile=paste0(dest,'/',file),
mode='wb')
}
}
download_GBD(TaskID = '576a3038524da24d988f70f0e72dd59c',num = 51,dest = 'F:/GBD')
download_GBD(TaskID = 'd6e17cb5500433de138f3a0699a3f7b3',num = 177, dest = 'F:/GBD')
download_GBD <- function(TaskID,num,dest){
for (i in 1:num){
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
}
}
download_GBD(TaskID='50409ff4de71d629c802be0eff3725be',num=404,dest='F:/GBD')
GBD_url
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
TaskID = '50409ff4de71d629c802be0eff3725be'
dest = 'F:/GBD'
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
GBD_url
i=1
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
GBD_url
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
paste0(dest,'/',file)
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
download_GBD <- function(TaskID,num,dest){
for (i in 1:num){
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
}
}
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
i=2
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
download_GBD(TaskID = 'd6e17cb5500433de138f3a0699a3f7b3',num = 177, dest = 'F:/GBD')
download_GBD(TaskID = '576a3038524da24d988f70f0e72dd59c',num = 51,dest = 'F:/GBD')
download_GBD <- function(TaskID,num,dest){
for (i in 1:num){
GBD_url <- paste0('https://dl.healthdata.org:443/gbd-api-2019-public/',TaskID,'/','IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
file <-  paste0('IHME-GBD_2019_DATA-',substr(TaskID,1,8),'-',i,'.zip')
download.file(url = GBD_url,
destfile=paste0(dest,'/',file),
mode='wb')
}
}
download_GBD(TaskID='40f82465d3e5cca8dfacd2d604038d0f',num=76,dest='F:/GBD')
devtools::install_github('xiaoming-room/install')
remotes::install_github("johncassil/stringr.plus")
install.packages("remotes")
install.packages("remotes")
remotes::install_github('xiaoming-room/install')
packages <- c("remotes","httr","jsonlite","tidyverse")
for (i in 1:length(packages)) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
}
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs = TRUE)
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs = TRUE)
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs = TRUE)
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs = TRUE)
if (!'stringr.plus' %in% installed.packages()[,"Package"]) {
remotes::install_github("johncassil/stringr.plus")
}
packages <- c("remotes","httr","jsonlite","tidyverse")
for (i in 1:length(packages)) {
if (!packages[i] %in% installed.packages()[,"Package"]) {
install.packages(packages[i], dependencies = TRUE, quiet = TRUE, keep_outputs=TRUE)
}
}
library(GBDinstall)
install.packages('glue')
install.packages('magrittr')
